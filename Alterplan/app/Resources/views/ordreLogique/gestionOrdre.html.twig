{#
This file is part of Alterplan. 
 
Alterplan is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. 
 
Alterplan is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. 
 
You should have received a copy of the GNU Affero General Public License along with Alterplan. If not, see <http://www.gnu.org/licenses/>.
#}

{% extends '::navigableBase.html.twig' %}

{% block title %}
    Ordre logique
{% endblock %}

{% block customCSS %}
    <link rel="stylesheet" href="{{ asset('css/dragula/dragula.css') }}" />
    <link rel="stylesheet" href="{{ asset('css/ordreLogique.css') }}" />
{% endblock %}

{% block body %}
    <div class="row">
        <div class="col s3 card">
            <div class="card-content">
                <span class="card-title">Modules</span>
                {% for module in modules %}
                    <div id="{{ module.idModule }}" class="flow-text valign-wrapper card-panel module clickable">
                        <span class="card-title">{{ module.libelle }}</span>
                    </div>
                {% endfor %}
            </div>
        </div>

        <div class="col s9 ordreContent">
            {% include ':ordreLogique:ordreModule.html.twig'%}
        </div>
        <div class="fixed-action-btn">
            <a id="save" class="btn-floating btn-large waves-effect waves-light">
                <i class="large material-icons">save</i>
            </a>
            <a id="cancel" class="btn-floating btn-large waves-effect waves-light red">
                <i class="large material-icons">cancel</i>
            </a>
        </div>
    </div>
{% endblock %}

{% block customJS %}
    <script type="text/javascript" src="{{ asset('js/dragula/3.7.2/dragula.min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/webReflection/document-register-element.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/ordreLogique/module.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/ordreLogique/draggableContainer.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/ordreLogique/sousGroupe.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/ordreLogique/groupe.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/ordreLogique.js') }}"></script>
    <script type="text/javascript" src="{{ asset('js/formation.js') }}"></script>
    <script type="text/javascript">
        var ordreLogique = new OrdreLogique({{ formation|json_encode(constant('JSON_PRETTY_PRINT'))|raw }});

        $(document).ready(function () {
            $('#save').click(function (e) {
                e.preventDefault();
                showLoader();
                $.post("{{ path('formations_save', {'codeFormation': formation.codeFormation}) }}",
                    {'ordreLogique': ordreLogique.formation.getInnerFormation()}).done(function (data) {
                        ordreLogique = new OrdreLogique(JSON.parse(data));
                        ordreLogique.formation.selectModule(parseInt($('.module.selected').attr('id'), 10));
                        showToast('Les modifications ont été enregistrées');
                }).fail(function () {
                    showToast("Erreur interne", 'error');
                }).always(function () {
                    dismissLoader();
                });
            });

            $('#cancel').click(function (e) {
                e.preventDefault();
                showLoader();
                $.get("{{ path('formations_edit',{'codeFormation': formation.codeFormation}) }}", function (data) {
                    ordreLogique = new OrdreLogique({{ formation|json_encode(constant('JSON_PRETTY_PRINT'))|raw }});
                    var selectedModule = $('.module.selected');
                    if (selectedModule){
                        selectedModule.removeClass('selected');
                    }
                    $('.ordreContent').html(data);
                }).fail(function () {
                    showToast('Erreur interne', 'error');
                }).always(function () {
                    dismissLoader();
                });
            });

            $('.module.clickable').each(function (index) {
                //Au click sur le module de gauche
                $(this).click(function () {
                    var module = $(this);
                    //On sélectionne le module côté Json
                    ordreLogique.formation.selectModule(parseInt(module.attr('id'), 10));

                    //On désélectionne l'ancien
                    var otherSelected = $('.module.selected');
                    if (otherSelected){
                        otherSelected.each(function (index) {
                            $(otherSelected[index]).removeClass('selected');
                        });
                    }
                    module.addClass('selected');
                    //On met à jour le text de la partie centrale
                    $('#selected-module-titre').text(module.text());

                    //On crée les modules disponibles
                    ordreLogique.createModulesDisponibles();
                    //On crée les groupes
                    ordreLogique.createGroupesModules();
                });
            });

            var drake = new dragula({
                isContainer: ordreLogique.isContainer,
                moves: ordreLogique.moves,
                accepts: ordreLogique.accepts,
                revertOnSpill: false,
                delay: 500
            });

            //Lorsqu'on drop un élément el, prevenant de source, dans le conteneur target devant le sibling
            drake.on('drop', ordreLogique.onDrop);
        });
    </script>
{% endblock %}